syntax = "proto3";

package PGo;

import public "holoholo_shared.proto";

enum GetMapObjectsOutProtoStatus {
  UNSET_STATUS = 0; // was originally "UNSET" in the app itself
  SUCCESS = 1;
  LOCATION_UNSET = 2;
}

enum FortSponsor {
  UNSET_SPONSOR = 0; // was originally "UNSET" in the app itself
  MCDONALDS = 1;
  POKEMON_STORE = 2;
}

enum FortRenderingType {
  DEFAULT = 0;
  INTERNAL_TEST = 1;
}

enum FortType {
  GYM = 0;
  POKESTOP = 1; // was originally "CHECKPOINT" in the app itself
}

// The get map objects request object
message GetMapObjectsProto {
  int32 CellId = 1;
  int64 SinceTimeMs = 2;
  double PlayerLat = 3;
  double PlayerLng = 4;
}

// The get map objects response object
message GetMapObjectsOutProto {
  repeated ClientMapCellProto MapCell = 1;
  GetMapObjectsOutProtoStatus Status = 2;
}

// A cell is a geographical "zone" containing objects like pokemon, gyms, and pokestops
message ClientMapCellProto {

  // S2 geographic area that the cell covers (http://s2map.com/) (https://code.google.com/archive/p/s2-geometry-library/)
  uint64 S2CellId = 1;

  // current timestamp
  int64 AsOfTimeMs = 2;

  repeated PokemonFortProto Fort = 3;
  repeated ClientSpawnPointProto SpawnPoint = 4;
  bool DeletedObject = 6;
  bool IsTruncatedList = 7;
  repeated PokemonSummaryFortProto FortSummary = 8;
  repeated ClientSpawnPointProto DecimatedSpawnPoint = 9;

  // Pokemon farther away than 2 "steps", but still in the area (3 "steps" away)
  repeated NearbyPokemonProto NearbyPokemon = 11;

  // Each pokemon within 2 "steps" or closer will have a WildPokemonProto and MapPokemonProto object
  repeated WildPokemonProto WildPokemon = 5;
  repeated MapPokemonProto CatchablePokemon = 10;
}

// A "fort" is the internal name for a gym or pokestop point of interest
message PokemonFortProto {
  string FortId = 1;
  int64 LastModifiedMs = 2;
  double Latitude = 3;
  double Longitude = 4;
  bool Enabled = 8;

  // Fields related to gyms only

  // Team that owns the gym
  Custom_TeamColor Team = 5;

  // Highest CP Pokemon at the gym
  Custom_PokemonName GuardPokemonId = 6;
  int32 GuardPokemonLevel = 7;

  // Prestigate / experience of the gym
  int64 GymPoints = 10;

  // Whether someone is battling at the gym currently
  bool IsInBattle = 11;

  // Fields related to pokestops only

  // If 1, this is a pokestop
  FortType FortType = 9;

  // Timestamp when the pokestop can be activated again to get items / xp
  int64 CooldownCompleteMs = 14;

  FortSponsor Sponsor = 15;
  FortRenderingType RenderingType = 16;

  // Might represent the type of item applied to the pokestop, right only lures can be applied
  bytes ActiveFortModifier = 12;

  message Custom_FortLureInfoProto {
    string FortId = 1;
    double NotSure2 = 2;
    Custom_PokemonName ActivePokemon = 3;
    int64 LureExpiryMs = 4;
  }
  Custom_FortLureInfoProto FortLureInfo = 13;
}

message PokemonSummaryFortProto {
  string FortSummaryId = 1;
  int64 LastModifiedMs = 2;
  double Latitude = 3;
  double Longitude = 4;
}

message NearbyPokemonProto {
  Custom_PokemonName PokedexNumber = 1;
  float DistanceMeters = 2;
  double EncounterId = 3;
}

message WildPokemonProto {
  double EncounterId = 1;
  int64 LastModifiedMs = 2;
  double Latitude = 3;
  double Longitude = 4;

  // S2 geographic area of the spawn point (http://s2map.com/) (https://code.google.com/archive/p/s2-geometry-library/)
  string SpawnPointId = 5;

  message Custom_PokemonInfoProto {
    Custom_PokemonName Pokemon = 2;
  }
  Custom_PokemonInfoProto PokemonInfo = 7;

  // The amount of time before the pokemon will be gone
  int32 TimeTillHiddenMs = 11;
}

message ClientSpawnPointProto {
  double Latitude = 2;
  double Longitude = 3;
}

message MapPokemonProto {
  // S2 geographic area of the spawn point (http://s2map.com/) (https://code.google.com/archive/p/s2-geometry-library/)
  string SpawnpointId = 1;

  double EncounterId = 2;
  Custom_PokemonName PokedexTypeId = 3;

  // After this timestamp, the pokemon will be gone
  int64 ExpirationTimeMs = 4;

  double Latitude = 5;
  double Longitude = 6;
}
